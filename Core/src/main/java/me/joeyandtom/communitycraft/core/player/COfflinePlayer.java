package me.joeyandtom.communitycraft.core.player;

import lombok.NonNull;
import me.joeyandtom.communitycraft.core.asset.Asset;

import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.UUID;

/**
 * This represents both an online and offline player and can be obtained via a CPlayerManager implementation.
 *
 * This provides access to a player's settings, assets, and various metadata, along with a method to resolve the online player.
 *
 * This class should be most polymorphic friendly type for players, if you can get by using this to represent a player anywhere, you must.
 */
public interface COfflinePlayer {
    /**
     * Gets the known usernames. All usernames on login are logged and placed into storage. This will return all current usernames.
     * @return All usernames in a list.
     */
    List<String> getKnownUsernames();

    /**
     * Gets the last known username, this is best for commands involving offline usage of a player, or for confirmation.
     * @return The last known username
     */
    String getLastKnownUsername();

    /**
     * Gets the unique identifier for the player that is generated by mojang and managed by us to identify the player.
     * @return A {@link java.util.UUID} object for the Minecraft UUID.
     */
    UUID getUniqueIdentifier();

    /**
     * Gets all the known IP addresses in a {@link java.util.List} of {@link java.lang.String}s.
     * @return Known IP Addresses.
     */
    List<String> getKnownIPAddresses();

    /**
     * Gets the first time the player was recorded as online in a java {@link java.util.Date} object.
     * @return The first time the player joined the server.
     */
    Date getFirstTimeOnline();

    /**
     * Gets the most recent time the player disconnected from the server in a java {@link java.util.Date} object.
     * @return The most recent time the player disconnected from the server.
     */
    Date getLastTimeOnline();

    /**
     * Gets the amount of time the player has spent online.
     *
     * This is recorded in milliseconds, and can be converted into seconds by dividing by 1000.
     *
     * @return The amount of time the player has spent online.
     */
    Long getMillisecondsOnline();


    /**
     * Gets the value of a setting by key with a default value and type.
     * @param key The key that is used to uniquely identify the setting entry.
     * @param type The type of the entry, this will force the entry to be cast to this type and return the default value if a ClassCastException is caught.
     * @param defaultValue The default value of this setting in the case it does not exist, or a ClassCastException is caught.
     * @param <T> The type parameter for the setting.
     * @return The value of the setting as specified by the above parameters.
     */
    <T> T getSettingValue(@NonNull String key, @NonNull Class<T> type, T defaultValue);

    /**
     *
     * @param key
     * @param type
     * @param <T>
     * @return
     */
    <T> T getSettingValue(@NonNull String key, @NonNull Class<T> type);
    void storeSettingValue(@NonNull String key, Object value);
    void removeSettingValue(@NonNull String key);
    boolean isSettingValuePresent(@NonNull String key);

    void giveAsset(@NonNull Asset asset);
    Collection<Asset> getAssets();

    CPlayer getPlayer();

    void updateFromDatabase() throws DatabaseConnectException;
    void saveIntoDatabase() throws DatabaseConnectException;
}
